name: Compose Dashboard Backend Build

on:
  push:
    tags:
      - v*

env:
  WORKDIR: .

jobs:
  build-and-package:
    name: Build and Package Backend
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Получает тег
      - uses: actions/checkout@v2
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      
      - name: Test RELEASE_VERSION
        run: echo RELEASE_VERSION ${{ env.RELEASE_VERSION }}

      # Проставляем версию BuildName приложения в appsettings.json
      - name: Configure appsettings.json
        run: |
          APSETTINGS_RELEASE_VERSION="Smartan Backend Service ${{ env.RELEASE_VERSION }}"
          echo "APSETTINGS_RELEASE_VERSION=$APSETTINGS_RELEASE_VERSION">> $GITHUB_ENV
          sed -i 's|"BuildName":.*|"BuildName": "${{ env.APSETTINGS_RELEASE_VERSION }}",|' \
          "${{ env.WORKDIR }}/appsettings.compose.json"
        shell: bash

      - name: Test appsettings.json
        run: cat appsettings.compose.json

      # Отправляем запрос на healthcheck
      - name: Send GET request and get response
        id: get_request
        run: |
          # Отправляем GET-запрос и сохраняем ответ в переменную
          response=$(curl -s -X GET http://89.23.117.184/api/healthcheck) 
          
          # Выводим ответ в лог
          echo "Response: $response"
          
          # Сохраняем ответ в выходную переменную
          response_body=$response
        shell: bash

      - name: Use the response
        run: |
          # Используем сохранённый ответ
          SERVER_RESPONSE=${{ steps.get_request.outputs.response_body }}
          echo "SERVER_RESPONSE=$SERVER_RESPONSE" >> $GITHUB_ENV
          
          echo "The response body was: ${{ env.SERVER_RESPONSE }}"

      
      # Сравниваем занчение "BuildName" из "appsettings.compose.json" и ответ от сервера из "Send GET request and get response"
      - name: Compare BuildName and service responce
        run: | 
          # Проверяем ответ от сервера и номер релиза из appsettings.json
          echo "APSETTINGS_RELEASE_VERSION ${{ env.APSETTINGS_RELEASE_VERSION }}"
          echo "SERVER_RESPONSE ${{ env.SERVER_RESPONSE }}"
          
          if [ "${{ env.APSETTINGS_RELEASE_VERSION }}" == ${{ env.SERVER_RESPONSE }} ]; then
            echo "Все хорошо: значения равны."
          else
            echo "Ошибка: значения не равны."
            exit 1  # Завершаем скрипт с ошибкой
          fi
