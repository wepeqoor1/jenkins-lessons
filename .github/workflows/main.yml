name: Compose Dashboard Backend Build

on:
  workflow_dispatch:
  push:
    # tags:
    #   - v*
    branches:
      main

env:
  WORKDIR: .
  PROJECT_ROOT: .
  RELEASE_VERSION: "v1"

jobs:
  build-and-package:
    name: Build and Package Backend
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Update local repository
        run: |
          cd ${{ env.PROJECT_ROOT }}
          # Проверяем, есть ли изменения
          if [ -z "$(git status -s)" ]; then
            echo "Nothing to commit"
            echo " Start Pulling"
            git fetch --all
            git pull
          else
            echo "Changes not staged for commit"
            echo "Lock no staged files and start Pulling"
            git add .
            git stash
            git fetch --all
            git pull
            git stash pop
          fi
        shell: bash

      # # Получает тег  # TODO не забыть вернуть
      # - uses: actions/checkout@v2  TODO проверить 4 версию
      # - name: Set env
      #   run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      
      # - name: Test RELEASE_VERSION
      #   run: echo RELEASE_VERSION ${{ env.RELEASE_VERSION }}

      # Проставляем версию BuildName приложения в appsettings.json
      - name: Configure appsettings.json
        run: |
          APPSETTINGS_RELEASE_VERSION="Smartan Backend Service ${{ env.RELEASE_VERSION }}" 
          echo "APPSETTINGS_RELEASE_VERSION=$APPSETTINGS_RELEASE_VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Print Release version
        run: |
          echo "APPSETTINGS_RELEASE_VERSION: ${{ env.APPSETTINGS_RELEASE_VERSION }}"

      - name: Edit Release version in config file
        run: |
          sed -i 's|"BuildName":.*|"BuildName": "${{ env.APPSETTINGS_RELEASE_VERSION }}",|' \
            "${{ env.WORKDIR }}/appsettings.compose.json"
        shell: bash

      # Отправляем запрос на healthcheck
      - name: Send GET request and get response
        id: get_request
        run: |
          # Отправляем GET-запрос и сохраняем ответ в переменную
          response=$(curl -s -X GET http://89.23.117.184/api/healthcheck) 
          
          # Выводим ответ в лог
          echo "Response: $response"
          
          # Сохраняем ответ в выходную переменную
          SERVER_RESPONSE_BODY=$response

          # Используем сохранённый ответ
          echo "SERVER_RESPONSE_BODY=$SERVER_RESPONSE_BODY" >> $GITHUB_ENV
          
          echo "The response body was: ${{ env.SERVER_RESPONSE_BODY }}"
        shell: bash

      
      # Сравниваем занчение "BuildName" из "appsettings.compose.json" и ответ от сервера из "Send GET request and get response"
      - name: Compare BuildName and service responce
        run: | 
          # Проверяем ответ от сервера и номер релиза из appsettings.json
          echo "APPSETTINGS_RELEASE_VERSION: ${{ env.APPSETTINGS_RELEASE_VERSION }}"
          echo "SERVER_RESPONSE_BODY: ${{ env.SERVER_RESPONSE_BODY }}"
          
          if [ "${{ env.APPSETTINGS_RELEASE_VERSION }}" == "${{ env.SERVER_RESPONSE_BODY }}" ]; then
            echo "Все хорошо: значения равны."
          fi
          if [ "${{ env.APPSETTINGS_RELEASE_VERSION }}" != "${{ env.SERVER_RESPONSE_BODY }}" ]; then
            echo "Ошибка: значения не равны."
            exit 1  # Завершаем скрипт с ошибкой
          fi
        shell: bash
